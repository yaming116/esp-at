  
name: C/C++ CI

on:
  push:
    branches:
      - master
      - release/*
  watch:
    types: started

jobs:
  build-esp32-wroom-at:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: clone esp-idf
      run: |
        pip install --upgrade pip
        pip install pyyaml xlrd
        mkdir build
        echo -e "{\"platform\": \"PLATFORM_ESP32\", \"module\": \"WROOM-32\", \"silence\": 0}" > build/module_info.json
        ./build.py reconfigure || echo "skip exception"
      shell: bash
    - name: Install dependencies
      env:
        IDF_PATH: ${{ github.workspace }}/esp-idf
      run: |
        python -m pip install --user -r /home/runner/work/esp-at/esp-at/esp-idf/requirements.txt
    - name: Compiling
      env:
        AT_OTA_TOKEN_WROOM32: ${{ secrets.AT_OTA_TOKEN_WROOM32 }}
        AT_OTA_TOKEN_WROVER32: ${{ secrets.AT_OTA_TOKEN_WROVER32 }}
        AT_OTA_TOKEN_ESP32_PICO_D4: ${{ secrets.AT_OTA_TOKEN_ESP32_PICO_D4 }}
        AT_OTA_TOKEN_ESP32_SOLO_1: ${{ secrets.AT_OTA_TOKEN_ESP32_SOLO_1 }}
        AT_OTA_TOKEN_ESP32_MINI_1: ${{ secrets.AT_OTA_TOKEN_ESP32_MINI_1 }}
      run: |
        cd main
        rm -f at_config.h
        echo -e "#ifndef __AT_CONFIG_H__" >> at_config.h
        echo -e "#define __AT_CONFIG_H__" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_WROOM32 \"$AT_OTA_TOKEN_WROOM32\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_WROOM32 \"$AT_OTA_TOKEN_WROOM32\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_WROVER32 \"$AT_OTA_TOKEN_WROVER32\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_WROVER32 \"$AT_OTA_TOKEN_WROVER32\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_ESP32_PICO_D4 \"$AT_OTA_TOKEN_ESP32_PICO_D4\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_ESP32_PICO_D4 \"$AT_OTA_TOKEN_ESP32_PICO_D4\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_ESP32_SOLO_1 \"$AT_OTA_TOKEN_ESP32_SOLO_1\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_ESP32_SOLO_1 \"$AT_OTA_TOKEN_ESP32_SOLO_1\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_ESP32_MINI_1 \"$AT_OTA_TOKEN_ESP32_MINI_1\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_ESP32_MINI_1 \"$AT_OTA_TOKEN_ESP32_MINI_1\"" >> at_config.h
        echo -e "#endif" >> at_config.h
        cd -
        
        python ./esp-idf/tools/idf_tools.py --non-interactive install && eval "$(python ./esp-idf/tools/idf_tools.py --non-interactive export)" || exit 1
        python ./esp-idf/tools/idf_tools.py export --prefer-system
        
        ./build.py build
        upload_dir=esp32-wroom-at
        mkdir -p $upload_dir $upload_dir/bootloader $upload_dir/partition_table $upload_dir/customized_partitions $upload_dir/factory
        cp build/flash_project_args $upload_dir/download.config
        cp build/*.bin $upload_dir/
        cp build/*.elf $upload_dir/
        cp build/*.map $upload_dir/
        cp build/bootloader/*.bin $upload_dir/bootloader/
        cp build/partition_table/*.bin $upload_dir/partition_table/
        cp build/customized_partitions/*.bin $upload_dir/customized_partitions/
        cp build/flasher_args.json $upload_dir/
        cp build/flash_project_args $upload_dir/download.config
        cp build/factory/* $upload_dir/factory
      shell: bash
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2
      with:
        name: esp32-wroom-at
        path: esp32-wroom-at
           
  build-esp32-wrover-at:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: clone esp-idf
      run: |
        pip install --upgrade pip
        pip install pyyaml xlrd
        mkdir build
        echo -e "{\"platform\": \"PLATFORM_ESP32\", \"module\": \"WROVER-32\", \"silence\": 1}" > build/module_info.json
        ./build.py reconfigure || echo "skip exception"
      shell: bash
    - name: Install dependencies
      env:
        IDF_PATH: ${{ github.workspace }}/esp-idf
      run: |
        python -m pip install --user -r /home/runner/work/esp-at/esp-at/esp-idf/requirements.txt
    - name: Compiling
      env:
        AT_OTA_TOKEN_WROOM32: ${{ secrets.AT_OTA_TOKEN_WROOM32 }}
        AT_OTA_TOKEN_WROVER32: ${{ secrets.AT_OTA_TOKEN_WROVER32 }}
        AT_OTA_TOKEN_ESP32_PICO_D4: ${{ secrets.AT_OTA_TOKEN_ESP32_PICO_D4 }}
        AT_OTA_TOKEN_ESP32_SOLO_1: ${{ secrets.AT_OTA_TOKEN_ESP32_SOLO_1 }}
        AT_OTA_TOKEN_ESP32_MINI_1: ${{ secrets.AT_OTA_TOKEN_ESP32_MINI_1 }}
      run: |
        cd main
        rm -f at_config.h
        echo -e "#ifndef __AT_CONFIG_H__" >> at_config.h
        echo -e "#define __AT_CONFIG_H__" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_WROOM32 \"$AT_OTA_TOKEN_WROOM32\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_WROOM32 \"$AT_OTA_TOKEN_WROOM32\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_WROVER32 \"$AT_OTA_TOKEN_WROVER32\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_WROVER32 \"$AT_OTA_TOKEN_WROVER32\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_ESP32_PICO_D4 \"$AT_OTA_TOKEN_ESP32_PICO_D4\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_ESP32_PICO_D4 \"$AT_OTA_TOKEN_ESP32_PICO_D4\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_ESP32_SOLO_1 \"$AT_OTA_TOKEN_ESP32_SOLO_1\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_ESP32_SOLO_1 \"$AT_OTA_TOKEN_ESP32_SOLO_1\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_ESP32_MINI_1 \"$AT_OTA_TOKEN_ESP32_MINI_1\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_ESP32_MINI_1 \"$AT_OTA_TOKEN_ESP32_MINI_1\"" >> at_config.h
        echo -e "#endif" >> at_config.h
        cd -
        
        python ./esp-idf/tools/idf_tools.py --non-interactive install && eval "$(python ./esp-idf/tools/idf_tools.py --non-interactive export)" || exit 1
        python ./esp-idf/tools/idf_tools.py export --prefer-system

        ./build.py build
        upload_dir=esp32-wrover-at
        mkdir -p $upload_dir $upload_dir/bootloader $upload_dir/partition_table $upload_dir/customized_partitions $upload_dir/factory
        cp build/flash_project_args $upload_dir/download.config
        cp build/*.bin $upload_dir/
        cp build/*.elf $upload_dir/
        cp build/*.map $upload_dir/
        cp build/bootloader/*.bin $upload_dir/bootloader/
        cp build/partition_table/*.bin $upload_dir/partition_table/
        cp build/customized_partitions/*.bin $upload_dir/customized_partitions/
        cp build/flasher_args.json $upload_dir/
        cp build/flash_project_args $upload_dir/download.config
        cp build/factory/* $upload_dir/factory
      shell: bash
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2
      with:
        name: esp32-wrover-at
        path: esp32-wrover-at
        
  build-esp32-pico-d4-at:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: clone esp-idf
      run: |
        pip install --upgrade pip
        pip install pyyaml xlrd
        mkdir build
        echo -e "{\"platform\": \"PLATFORM_ESP32\", \"module\": \"PICO-D4\", \"silence\": 0}" > build/module_info.json
        ./build.py reconfigure || echo "skip exception"
      shell: bash
    - name: Install dependencies
      env:
        IDF_PATH: ${{ github.workspace }}/esp-idf
      run: |
        python -m pip install --user -r /home/runner/work/esp-at/esp-at/esp-idf/requirements.txt
    - name: Compiling
      env:
        AT_OTA_TOKEN_WROOM32: ${{ secrets.AT_OTA_TOKEN_WROOM32 }}
        AT_OTA_TOKEN_WROVER32: ${{ secrets.AT_OTA_TOKEN_WROVER32 }}
        AT_OTA_TOKEN_ESP32_PICO_D4: ${{ secrets.AT_OTA_TOKEN_ESP32_PICO_D4 }}
        AT_OTA_TOKEN_ESP32_SOLO_1: ${{ secrets.AT_OTA_TOKEN_ESP32_SOLO_1 }}
        AT_OTA_TOKEN_ESP32_MINI_1: ${{ secrets.AT_OTA_TOKEN_ESP32_MINI_1 }}
      run: |
        cd main
        rm -f at_config.h
        echo -e "#ifndef __AT_CONFIG_H__" >> at_config.h
        echo -e "#define __AT_CONFIG_H__" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_WROOM32 \"$AT_OTA_TOKEN_WROOM32\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_WROOM32 \"$AT_OTA_TOKEN_WROOM32\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_WROVER32 \"$AT_OTA_TOKEN_WROVER32\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_WROVER32 \"$AT_OTA_TOKEN_WROVER32\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_ESP32_PICO_D4 \"$AT_OTA_TOKEN_ESP32_PICO_D4\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_ESP32_PICO_D4 \"$AT_OTA_TOKEN_ESP32_PICO_D4\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_ESP32_SOLO_1 \"$AT_OTA_TOKEN_ESP32_SOLO_1\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_ESP32_SOLO_1 \"$AT_OTA_TOKEN_ESP32_SOLO_1\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_ESP32_MINI_1 \"$AT_OTA_TOKEN_ESP32_MINI_1\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_ESP32_MINI_1 \"$AT_OTA_TOKEN_ESP32_MINI_1\"" >> at_config.h
        echo -e "#endif" >> at_config.h
        cd -
        
        python ./esp-idf/tools/idf_tools.py --non-interactive install && eval "$(python ./esp-idf/tools/idf_tools.py --non-interactive export)" || exit 1
        python ./esp-idf/tools/idf_tools.py export --prefer-system
        ./build.py build
        upload_dir=esp32-pico-d4-at
        mkdir -p $upload_dir $upload_dir/bootloader $upload_dir/partition_table $upload_dir/customized_partitions $upload_dir/factory
        cp build/flash_project_args $upload_dir/download.config
        cp build/*.bin $upload_dir/
        cp build/*.elf $upload_dir/
        cp build/*.map $upload_dir/
        cp build/bootloader/*.bin $upload_dir/bootloader/
        cp build/partition_table/*.bin $upload_dir/partition_table/
        cp build/customized_partitions/*.bin $upload_dir/customized_partitions/
        cp build/flasher_args.json $upload_dir/
        cp build/flash_project_args $upload_dir/download.config
        cp build/factory/* $upload_dir/factory
      shell: bash
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2
      with:
        name: esp32-pico-d4-at
        path: esp32-pico-d4-at

  build-esp32-solo-at:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: clone esp-idf
      run: |
        pip install --upgrade pip
        pip install pyyaml xlrd
        mkdir build
        echo -e "{\"platform\": \"PLATFORM_ESP32\", \"module\": \"SOLO-1\", \"silence\": 0}" > build/module_info.json
        ./build.py reconfigure || echo "skip exception"
      shell: bash
    - name: Install dependencies
      env:
        IDF_PATH: ${{ github.workspace }}/esp-idf
      run: |
        python -m pip install --user -r /home/runner/work/esp-at/esp-at/esp-idf/requirements.txt
    - name: Compiling
      env:
        AT_OTA_TOKEN_WROOM32: ${{ secrets.AT_OTA_TOKEN_WROOM32 }}
        AT_OTA_TOKEN_WROVER32: ${{ secrets.AT_OTA_TOKEN_WROVER32 }}
        AT_OTA_TOKEN_ESP32_PICO_D4: ${{ secrets.AT_OTA_TOKEN_ESP32_PICO_D4 }}
        AT_OTA_TOKEN_ESP32_SOLO_1: ${{ secrets.AT_OTA_TOKEN_ESP32_SOLO_1 }}
        AT_OTA_TOKEN_ESP32_MINI_1: ${{ secrets.AT_OTA_TOKEN_ESP32_MINI_1 }}
      run: |
        cd main
        rm -f at_config.h
        echo -e "#ifndef __AT_CONFIG_H__" >> at_config.h
        echo -e "#define __AT_CONFIG_H__" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_WROOM32 \"$AT_OTA_TOKEN_WROOM32\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_WROOM32 \"$AT_OTA_TOKEN_WROOM32\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_WROVER32 \"$AT_OTA_TOKEN_WROVER32\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_WROVER32 \"$AT_OTA_TOKEN_WROVER32\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_ESP32_PICO_D4 \"$AT_OTA_TOKEN_ESP32_PICO_D4\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_ESP32_PICO_D4 \"$AT_OTA_TOKEN_ESP32_PICO_D4\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_ESP32_SOLO_1 \"$AT_OTA_TOKEN_ESP32_SOLO_1\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_ESP32_SOLO_1 \"$AT_OTA_TOKEN_ESP32_SOLO_1\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_ESP32_MINI_1 \"$AT_OTA_TOKEN_ESP32_MINI_1\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_ESP32_MINI_1 \"$AT_OTA_TOKEN_ESP32_MINI_1\"" >> at_config.h
        echo -e "#endif" >> at_config.h
        cd -
        
        python ./esp-idf/tools/idf_tools.py --non-interactive install && eval "$(python ./esp-idf/tools/idf_tools.py --non-interactive export)" || exit 1
        python ./esp-idf/tools/idf_tools.py export --prefer-system
        ./build.py build
        upload_dir=esp32-solo-1-at
        mkdir -p $upload_dir $upload_dir/bootloader $upload_dir/partition_table $upload_dir/customized_partitions $upload_dir/factory
        cp build/flash_project_args $upload_dir/download.config
        cp build/*.bin $upload_dir/
        cp build/*.elf $upload_dir/
        cp build/*.map $upload_dir/
        cp build/bootloader/*.bin $upload_dir/bootloader/
        cp build/partition_table/*.bin $upload_dir/partition_table/
        cp build/customized_partitions/*.bin $upload_dir/customized_partitions/
        cp build/flasher_args.json $upload_dir/
        cp build/flash_project_args $upload_dir/download.config
        cp build/factory/* $upload_dir/factory
      shell: bash
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2
      with:
        name: esp32-solo-1-at
        path: esp32-solo-1-at

  build-esp32-d2wd-at:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: clone esp-idf
      run: |
        pip install --upgrade pip
        pip install pyyaml xlrd
        mkdir build
        echo -e "{\"platform\": \"PLATFORM_ESP32\", \"module\": \"ESP32-D2WD\", \"silence\": 0}" > build/module_info.json
        ./build.py reconfigure || echo "skip exception"
      shell: bash
    - name: Install dependencies
      env:
        IDF_PATH: ${{ github.workspace }}/esp-idf
      run: |
        python -m pip install --user -r /home/runner/work/esp-at/esp-at/esp-idf/requirements.txt
    - name: Compiling
      env:
        AT_OTA_TOKEN_WROOM32: ${{ secrets.AT_OTA_TOKEN_WROOM32 }}
        AT_OTA_TOKEN_WROVER32: ${{ secrets.AT_OTA_TOKEN_WROVER32 }}
        AT_OTA_TOKEN_ESP32_PICO_D4: ${{ secrets.AT_OTA_TOKEN_ESP32_PICO_D4 }}
        AT_OTA_TOKEN_ESP32_SOLO_1: ${{ secrets.AT_OTA_TOKEN_ESP32_SOLO_1 }}
        AT_OTA_TOKEN_ESP32_MINI_1: ${{ secrets.AT_OTA_TOKEN_ESP32_MINI_1 }}
      run: |
        cd main
        rm -f at_config.h
        echo -e "#ifndef __AT_CONFIG_H__" >> at_config.h
        echo -e "#define __AT_CONFIG_H__" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_WROOM32 \"$AT_OTA_TOKEN_WROOM32\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_WROOM32 \"$AT_OTA_TOKEN_WROOM32\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_WROVER32 \"$AT_OTA_TOKEN_WROVER32\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_WROVER32 \"$AT_OTA_TOKEN_WROVER32\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_ESP32_PICO_D4 \"$AT_OTA_TOKEN_ESP32_PICO_D4\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_ESP32_PICO_D4 \"$AT_OTA_TOKEN_ESP32_PICO_D4\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_ESP32_SOLO_1 \"$AT_OTA_TOKEN_ESP32_SOLO_1\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_ESP32_SOLO_1 \"$AT_OTA_TOKEN_ESP32_SOLO_1\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_ESP32_MINI_1 \"$AT_OTA_TOKEN_ESP32_MINI_1\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_ESP32_MINI_1 \"$AT_OTA_TOKEN_ESP32_MINI_1\"" >> at_config.h
        echo -e "#endif" >> at_config.h
        cd -
        
        python ./esp-idf/tools/idf_tools.py --non-interactive install && eval "$(python ./esp-idf/tools/idf_tools.py --non-interactive export)" || exit 1
        python ./esp-idf/tools/idf_tools.py export --prefer-system
        ./build.py build
        upload_dir=esp32-d2wd-at
        mkdir -p $upload_dir $upload_dir/bootloader $upload_dir/partition_table $upload_dir/customized_partitions $upload_dir/factory
        cp build/flash_project_args $upload_dir/download.config
        cp build/*.bin $upload_dir/
        cp build/*.elf $upload_dir/
        cp build/*.map $upload_dir/
        cp build/bootloader/*.bin $upload_dir/bootloader/
        cp build/partition_table/*.bin $upload_dir/partition_table/
        cp build/customized_partitions/*.bin $upload_dir/customized_partitions/
        cp build/flasher_args.json $upload_dir/
        cp build/flash_project_args $upload_dir/download.config
        cp build/factory/* $upload_dir/factory
      shell: bash
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2
      with:
        name: esp32-d2wd-at
        path: esp32-d2wd-at

  build-esp32-mini-1-at:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: clone esp-idf
      run: |
        pip install --upgrade pip
        pip install pyyaml xlrd
        mkdir build
        echo -e "{\"platform\": \"PLATFORM_ESP32\", \"module\": \"MINI-1\", \"silence\": 0}" > build/module_info.json
        ./build.py reconfigure || echo "skip exception"
      shell: bash
    - name: Install dependencies
      env:
        IDF_PATH: ${{ github.workspace }}/esp-idf
      run: |
        python -m pip install --user -r /home/runner/work/esp-at/esp-at/esp-idf/requirements.txt
    - name: Compiling
      env:
        AT_OTA_TOKEN_WROOM32: ${{ secrets.AT_OTA_TOKEN_WROOM32 }}
        AT_OTA_TOKEN_WROVER32: ${{ secrets.AT_OTA_TOKEN_WROVER32 }}
        AT_OTA_TOKEN_ESP32_PICO_D4: ${{ secrets.AT_OTA_TOKEN_ESP32_PICO_D4 }}
        AT_OTA_TOKEN_ESP32_SOLO_1: ${{ secrets.AT_OTA_TOKEN_ESP32_SOLO_1 }}
        AT_OTA_TOKEN_ESP32_MINI_1: ${{ secrets.AT_OTA_TOKEN_ESP32_MINI_1 }}
      run: |
        cd main
        rm -f at_config.h
        echo -e "#ifndef __AT_CONFIG_H__" >> at_config.h
        echo -e "#define __AT_CONFIG_H__" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_WROOM32 \"$AT_OTA_TOKEN_WROOM32\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_WROOM32 \"$AT_OTA_TOKEN_WROOM32\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_WROVER32 \"$AT_OTA_TOKEN_WROVER32\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_WROVER32 \"$AT_OTA_TOKEN_WROVER32\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_ESP32_PICO_D4 \"$AT_OTA_TOKEN_ESP32_PICO_D4\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_ESP32_PICO_D4 \"$AT_OTA_TOKEN_ESP32_PICO_D4\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_ESP32_SOLO_1 \"$AT_OTA_TOKEN_ESP32_SOLO_1\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_ESP32_SOLO_1 \"$AT_OTA_TOKEN_ESP32_SOLO_1\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_ESP32_MINI_1 \"$AT_OTA_TOKEN_ESP32_MINI_1\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_ESP32_MINI_1 \"$AT_OTA_TOKEN_ESP32_MINI_1\"" >> at_config.h
        echo -e "#endif" >> at_config.h
        cd -
        
        python ./esp-idf/tools/idf_tools.py --non-interactive install && eval "$(python ./esp-idf/tools/idf_tools.py --non-interactive export)" || exit 1
        python ./esp-idf/tools/idf_tools.py export --prefer-system
        ./build.py build
        upload_dir=esp32-mini-1-at
        mkdir -p $upload_dir $upload_dir/bootloader $upload_dir/partition_table $upload_dir/customized_partitions $upload_dir/factory
        cp build/flash_project_args $upload_dir/download.config
        cp build/*.bin $upload_dir/
        cp build/*.elf $upload_dir/
        cp build/*.map $upload_dir/
        cp build/bootloader/*.bin $upload_dir/bootloader/
        cp build/partition_table/*.bin $upload_dir/partition_table/
        cp build/customized_partitions/*.bin $upload_dir/customized_partitions/
        cp build/flasher_args.json $upload_dir/
        cp build/flash_project_args $upload_dir/download.config
        cp build/factory/* $upload_dir/factory
      shell: bash
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2
      with:
        name: esp32-mini-1-at
        path: esp32-mini-1-at

  build-esp32s2-wroom-at:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: clone esp-idf
      run: |
        pip install --upgrade pip
        pip install pyyaml xlrd
        mkdir build
        echo -e "{\"platform\": \"PLATFORM_ESP32S2\", \"module\": \"WROOM\", \"silence\": 0}" > build/module_info.json
        ./build.py reconfigure || echo "skip exception"
      shell: bash
    - name: Install dependencies
      env:
        IDF_PATH: ${{ github.workspace }}/esp-idf
      run: |
        python -m pip install --user -r /home/runner/work/esp-at/esp-at/esp-idf/requirements.txt
    - name: Compiling
      env:
        AT_OTA_TOKEN_ESP32S2_WROOM: ${{ secrets.AT_OTA_TOKEN_ESP32S2_WROOM }}
        AT_OTA_TOKEN_ESP32S2_WROVER: ${{ secrets.AT_OTA_TOKEN_ESP32S2_WROVER }}
        AT_OTA_TOKEN_ESP32S2_SOLO: ${{ secrets.AT_OTA_TOKEN_ESP32S2_SOLO }}
        AT_OTA_TOKEN_ESP32S2_MINI: ${{ secrets.AT_OTA_TOKEN_ESP32S2_MINI }}
      run: |
        cd main
        rm -f at_config.h
        echo -e "#ifndef __AT_CONFIG_H__" >> at_config.h
        echo -e "#define __AT_CONFIG_H__" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_ESP32S2_WROOM \"$AT_OTA_TOKEN_ESP32S2_WROOM\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_ESP32S2_WROOM \"$AT_OTA_TOKEN_ESP32S2_WROOM\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_ESP32S2_WROVER \"$AT_OTA_TOKEN_ESP32S2_WROVER\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_ESP32S2_WROVER \"$AT_OTA_TOKEN_ESP32S2_WROVER\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_ESP32S2_SOLO \"$AT_OTA_TOKEN_ESP32S2_SOLO\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_ESP32S2_SOLO \"$AT_OTA_TOKEN_ESP32S2_SOLO\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_ESP32S2_MINI \"$AT_OTA_TOKEN_ESP32S2_MINI\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_ESP32S2_MINI \"$AT_OTA_TOKEN_ESP32S2_MINI\"" >> at_config.h
        echo -e "#endif" >> at_config.h
        cd -
        
        python ./esp-idf/tools/idf_tools.py --non-interactive install && eval "$(python ./esp-idf/tools/idf_tools.py --non-interactive export)" || exit 1
        python ./esp-idf/tools/idf_tools.py export --prefer-system
        ./build.py build
        upload_dir=esp32s2-wroom-at
        mkdir -p $upload_dir $upload_dir/bootloader $upload_dir/partition_table $upload_dir/customized_partitions $upload_dir/factory
        cp build/flash_project_args $upload_dir/download.config
        cp build/*.bin $upload_dir/
        cp build/*.elf $upload_dir/
        cp build/*.map $upload_dir/
        cp build/bootloader/*.bin $upload_dir/bootloader/
        cp build/partition_table/*.bin $upload_dir/partition_table/
        cp build/customized_partitions/*.bin $upload_dir/customized_partitions/
        cp build/flasher_args.json $upload_dir/
        cp build/flash_project_args $upload_dir/download.config
        cp build/factory/* $upload_dir/factory
      shell: bash
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2
      with:
        name: esp32s2-wroom-at
        path: esp32s2-wroom-at
        
  build-esp32s2-wrover-at:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: clone esp-idf
      run: |
        pip install --upgrade pip
        pip install pyyaml xlrd
        mkdir build
        echo -e "{\"platform\": \"PLATFORM_ESP32S2\", \"module\": \"WROVER\", \"silence\": 0}" > build/module_info.json
        ./build.py reconfigure || echo "skip exception"
      shell: bash
    - name: Install dependencies
      env:
        IDF_PATH: ${{ github.workspace }}/esp-idf
      run: |
        python -m pip install --user -r /home/runner/work/esp-at/esp-at/esp-idf/requirements.txt
    - name: Compiling
      env:
        AT_OTA_TOKEN_ESP32S2_WROOM: ${{ secrets.AT_OTA_TOKEN_ESP32S2_WROOM }}
        AT_OTA_TOKEN_ESP32S2_WROVER: ${{ secrets.AT_OTA_TOKEN_ESP32S2_WROVER }}
        AT_OTA_TOKEN_ESP32S2_SOLO: ${{ secrets.AT_OTA_TOKEN_ESP32S2_SOLO }}
        AT_OTA_TOKEN_ESP32S2_MINI: ${{ secrets.AT_OTA_TOKEN_ESP32S2_MINI }}
      run: |
        cd main
        rm -f at_config.h
        echo -e "#ifndef __AT_CONFIG_H__" >> at_config.h
        echo -e "#define __AT_CONFIG_H__" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_ESP32S2_WROOM \"$AT_OTA_TOKEN_ESP32S2_WROOM\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_ESP32S2_WROOM \"$AT_OTA_TOKEN_ESP32S2_WROOM\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_ESP32S2_WROVER \"$AT_OTA_TOKEN_ESP32S2_WROVER\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_ESP32S2_WROVER \"$AT_OTA_TOKEN_ESP32S2_WROVER\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_ESP32S2_SOLO \"$AT_OTA_TOKEN_ESP32S2_SOLO\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_ESP32S2_SOLO \"$AT_OTA_TOKEN_ESP32S2_SOLO\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_ESP32S2_MINI \"$AT_OTA_TOKEN_ESP32S2_MINI\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_ESP32S2_MINI \"$AT_OTA_TOKEN_ESP32S2_MINI\"" >> at_config.h
        echo -e "#endif" >> at_config.h
        cd -
        
        python ./esp-idf/tools/idf_tools.py --non-interactive install && eval "$(python ./esp-idf/tools/idf_tools.py --non-interactive export)" || exit 1
        python ./esp-idf/tools/idf_tools.py export --prefer-system
        ./build.py build
        upload_dir=esp32s2-wrover-at
        mkdir -p $upload_dir $upload_dir/bootloader $upload_dir/partition_table $upload_dir/customized_partitions $upload_dir/factory
        cp build/flash_project_args $upload_dir/download.config
        cp build/*.bin $upload_dir/
        cp build/*.elf $upload_dir/
        cp build/*.map $upload_dir/
        cp build/bootloader/*.bin $upload_dir/bootloader/
        cp build/partition_table/*.bin $upload_dir/partition_table/
        cp build/customized_partitions/*.bin $upload_dir/customized_partitions/
        cp build/flasher_args.json $upload_dir/
        cp build/flash_project_args $upload_dir/download.config
        cp build/factory/* $upload_dir/factory
      shell: bash
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2
      with:
        name: esp32s2-wrover-at
        path: esp32s2-wrover-at

  build-esp32s2-solo-at:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: clone esp-idf
      run: |
        pip install --upgrade pip
        pip install pyyaml xlrd
        mkdir build
        echo -e "{\"platform\": \"PLATFORM_ESP32S2\", \"module\": \"SOLO\", \"silence\": 0}" > build/module_info.json
        ./build.py reconfigure || echo "skip exception"
      shell: bash
    - name: Install dependencies
      env:
        IDF_PATH: ${{ github.workspace }}/esp-idf
      run: |
        python -m pip install --user -r /home/runner/work/esp-at/esp-at/esp-idf/requirements.txt
    - name: Compiling
      env:
        AT_OTA_TOKEN_ESP32S2_WROOM: ${{ secrets.AT_OTA_TOKEN_ESP32S2_WROOM }}
        AT_OTA_TOKEN_ESP32S2_WROVER: ${{ secrets.AT_OTA_TOKEN_ESP32S2_WROVER }}
        AT_OTA_TOKEN_ESP32S2_SOLO: ${{ secrets.AT_OTA_TOKEN_ESP32S2_SOLO }}
        AT_OTA_TOKEN_ESP32S2_MINI: ${{ secrets.AT_OTA_TOKEN_ESP32S2_MINI }}
      run: |
        cd main
        rm -f at_config.h
        echo -e "#ifndef __AT_CONFIG_H__" >> at_config.h
        echo -e "#define __AT_CONFIG_H__" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_ESP32S2_WROOM \"$AT_OTA_TOKEN_ESP32S2_WROOM\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_ESP32S2_WROOM \"$AT_OTA_TOKEN_ESP32S2_WROOM\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_ESP32S2_WROVER \"$AT_OTA_TOKEN_ESP32S2_WROVER\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_ESP32S2_WROVER \"$AT_OTA_TOKEN_ESP32S2_WROVER\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_ESP32S2_SOLO \"$AT_OTA_TOKEN_ESP32S2_SOLO\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_ESP32S2_SOLO \"$AT_OTA_TOKEN_ESP32S2_SOLO\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_ESP32S2_MINI \"$AT_OTA_TOKEN_ESP32S2_MINI\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_ESP32S2_MINI \"$AT_OTA_TOKEN_ESP32S2_MINI\"" >> at_config.h
        echo -e "#endif" >> at_config.h
        cd -
        
        python ./esp-idf/tools/idf_tools.py --non-interactive install && eval "$(python ./esp-idf/tools/idf_tools.py --non-interactive export)" || exit 1
        python ./esp-idf/tools/idf_tools.py export --prefer-system
        ./build.py build
        upload_dir=esp32s2-solo-at
        mkdir -p $upload_dir $upload_dir/bootloader $upload_dir/partition_table $upload_dir/customized_partitions $upload_dir/factory
        cp build/flash_project_args $upload_dir/download.config
        cp build/*.bin $upload_dir/
        cp build/*.elf $upload_dir/
        cp build/*.map $upload_dir/
        cp build/bootloader/*.bin $upload_dir/bootloader/
        cp build/partition_table/*.bin $upload_dir/partition_table/
        cp build/customized_partitions/*.bin $upload_dir/customized_partitions/
        cp build/flasher_args.json $upload_dir/
        cp build/flash_project_args $upload_dir/download.config
        cp build/factory/* $upload_dir/factory
      shell: bash
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2
      with:
        name: esp32s2-solo-at
        path: esp32s2-solo-at

  build-esp32s2-mini-at:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: clone esp-idf
      run: |
        pip install --upgrade pip
        pip install pyyaml xlrd
        mkdir build
        echo -e "{\"platform\": \"PLATFORM_ESP32S2\", \"module\": \"MINI\", \"silence\": 0}" > build/module_info.json
        ./build.py reconfigure || echo "skip exception"
      shell: bash
    - name: Install dependencies
      env:
        IDF_PATH: ${{ github.workspace }}/esp-idf
      run: |
        python -m pip install --user -r /home/runner/work/esp-at/esp-at/esp-idf/requirements.txt
    - name: Compiling
      env:
        AT_OTA_TOKEN_ESP32S2_WROOM: ${{ secrets.AT_OTA_TOKEN_ESP32S2_WROOM }}
        AT_OTA_TOKEN_ESP32S2_WROVER: ${{ secrets.AT_OTA_TOKEN_ESP32S2_WROVER }}
        AT_OTA_TOKEN_ESP32S2_SOLO: ${{ secrets.AT_OTA_TOKEN_ESP32S2_SOLO }}
        AT_OTA_TOKEN_ESP32S2_MINI: ${{ secrets.AT_OTA_TOKEN_ESP32S2_MINI }}
      run: |
        cd main
        rm -f at_config.h
        echo -e "#ifndef __AT_CONFIG_H__" >> at_config.h
        echo -e "#define __AT_CONFIG_H__" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_ESP32S2_WROOM \"$AT_OTA_TOKEN_ESP32S2_WROOM\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_ESP32S2_WROOM \"$AT_OTA_TOKEN_ESP32S2_WROOM\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_ESP32S2_WROVER \"$AT_OTA_TOKEN_ESP32S2_WROVER\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_ESP32S2_WROVER \"$AT_OTA_TOKEN_ESP32S2_WROVER\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_ESP32S2_SOLO \"$AT_OTA_TOKEN_ESP32S2_SOLO\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_ESP32S2_SOLO \"$AT_OTA_TOKEN_ESP32S2_SOLO\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_ESP32S2_MINI \"$AT_OTA_TOKEN_ESP32S2_MINI\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_ESP32S2_MINI \"$AT_OTA_TOKEN_ESP32S2_MINI\"" >> at_config.h
        echo -e "#endif" >> at_config.h
        cd -
        
        python ./esp-idf/tools/idf_tools.py --non-interactive install && eval "$(python ./esp-idf/tools/idf_tools.py --non-interactive export)" || exit 1
        python ./esp-idf/tools/idf_tools.py export --prefer-system
        ./build.py build
        upload_dir=esp32s2-mini-at
        mkdir -p $upload_dir $upload_dir/bootloader $upload_dir/partition_table $upload_dir/customized_partitions $upload_dir/factory
        cp build/flash_project_args $upload_dir/download.config
        cp build/*.bin $upload_dir/
        cp build/*.elf $upload_dir/
        cp build/*.map $upload_dir/
        cp build/bootloader/*.bin $upload_dir/bootloader/
        cp build/partition_table/*.bin $upload_dir/partition_table/
        cp build/customized_partitions/*.bin $upload_dir/customized_partitions/
        cp build/flasher_args.json $upload_dir/
        cp build/flash_project_args $upload_dir/download.config
        cp build/factory/* $upload_dir/factory
      shell: bash
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2
      with:
        name: esp32s2-mini-at
        path: esp32s2-mini-at

  build-esp8266-wroom02-at:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: clone esp-idf
      env:
        AT_OTA_TOKEN_WROOM_02_1024_1024: ${{ secrets.AT_OTA_TOKEN_WROOM_02_1024_1024 }}
        AT_OTA_TOKEN_WROOM_S2_1024_1024: ${{ secrets.AT_OTA_TOKEN_WROOM_S2_1024_1024 }}
        AT_OTA_TOKEN_WROOM_5V2L: ${{ secrets.AT_OTA_TOKEN_WROOM_5V2L }}
        AT_OTA_TOKEN_ESP8266_1MB: ${{ secrets.AT_OTA_TOKEN_ESP8266_1MB }}
        AT_OTA_TOKEN_WROOM_02_N_1024_1024: ${{ secrets.AT_OTA_TOKEN_WROOM_02_1024_1024 }}
      run: |
        cd main
        rm -f at_config.h
        echo -e "#ifndef __AT_CONFIG_H__" >> at_config.h
        echo -e "#define __AT_CONFIG_H__" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_WROOM_02 \"$AT_OTA_TOKEN_WROOM_02_1024_1024\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_WROOM_02 \"$AT_OTA_TOKEN_WROOM_02_1024_1024\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_WROOM_S2 \"$AT_OTA_TOKEN_WROOM_S2_1024_1024\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_WROOM_S2 \"$AT_OTA_TOKEN_WROOM_S2_1024_1024\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_WROOM_5V2L \"$AT_OTA_TOKEN_WROOM_5V2L\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_WROOM_5V2L \"$AT_OTA_TOKEN_WROOM_5V2L\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_ESP8266_1MB \"$AT_OTA_TOKEN_ESP8266_1MB\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_ESP8266_1MB \"$AT_OTA_TOKEN_ESP8266_1MB\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_WROOM_02_N \"$AT_OTA_TOKEN_WROOM_02_N_1024_1024\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_WROOM_02_N \"$AT_OTA_TOKEN_WROOM_02_N_1024_1024\"" >> at_config.h
        echo -e "#endif" >> at_config.h
        cd -

        pip install --upgrade pip
        pip install pyyaml xlrd
        mkdir build
        echo -e "{\"platform\": \"PLATFORM_ESP8266\", \"module\": \"WROOM-02\", \"silence\": 0}" > build/module_info.json
        ./build.py reconfigure || echo "skip exception"
      shell: bash
    - name: Install dependencies
      env:
        IDF_PATH: ${{ github.workspace }}/esp-idf
      run: |
        python -m pip install --user -r /home/runner/work/esp-at/esp-at/esp-idf/requirements.txt
    - name: Compiling
      run: |
        wget --no-check-certificate https://dl.espressif.com/dl/xtensa-lx106-elf-linux64-1.22.0-100-ge567ec7-5.2.0.tar.gz
        tar -xzf xtensa-lx106-elf-linux64-1.22.0-100-ge567ec7-5.2.0.tar.gz
        export PATH="$PATH:$(pwd)/xtensa-lx106-elf/bin"
        ./build.py build
        upload_dir=esp8266-wroom02-at
        mkdir -p $upload_dir $upload_dir/bootloader $upload_dir/partition_table $upload_dir/customized_partitions $upload_dir/factory
        cp build/flash_project_args $upload_dir/download.config
        cp build/*.bin $upload_dir/
        cp build/*.elf $upload_dir/
        cp build/*.map $upload_dir/
        cp build/bootloader/*.bin $upload_dir/bootloader/
        cp build/partition_table/*.bin $upload_dir/partition_table/
        cp build/customized_partitions/*.bin $upload_dir/customized_partitions/
        cp build/flasher_args.json $upload_dir/
        cp build/flash_project_args $upload_dir/download.config
        cp build/factory/* $upload_dir/factory
      shell: bash
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2
      with:
        name: esp8266-wroom02-at
        path: esp8266-wroom02-at

  build-esp8266_wroom_5V2L_at:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: clone esp-idf
      env:
        AT_OTA_TOKEN_WROOM_02_1024_1024: ${{ secrets.AT_OTA_TOKEN_WROOM_02_1024_1024 }}
        AT_OTA_TOKEN_WROOM_S2_1024_1024: ${{ secrets.AT_OTA_TOKEN_WROOM_S2_1024_1024 }}
        AT_OTA_TOKEN_WROOM_5V2L: ${{ secrets.AT_OTA_TOKEN_WROOM_5V2L }}
        AT_OTA_TOKEN_ESP8266_1MB: ${{ secrets.AT_OTA_TOKEN_ESP8266_1MB }}
        AT_OTA_TOKEN_WROOM_02_N_1024_1024: ${{ secrets.AT_OTA_TOKEN_WROOM_02_1024_1024 }}
      run: |
        cd main
        rm -f at_config.h
        echo -e "#ifndef __AT_CONFIG_H__" >> at_config.h
        echo -e "#define __AT_CONFIG_H__" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_WROOM_02 \"$AT_OTA_TOKEN_WROOM_02_1024_1024\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_WROOM_02 \"$AT_OTA_TOKEN_WROOM_02_1024_1024\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_WROOM_S2 \"$AT_OTA_TOKEN_WROOM_S2_1024_1024\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_WROOM_S2 \"$AT_OTA_TOKEN_WROOM_S2_1024_1024\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_WROOM_5V2L \"$AT_OTA_TOKEN_WROOM_5V2L\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_WROOM_5V2L \"$AT_OTA_TOKEN_WROOM_5V2L\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_ESP8266_1MB \"$AT_OTA_TOKEN_ESP8266_1MB\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_ESP8266_1MB \"$AT_OTA_TOKEN_ESP8266_1MB\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_WROOM_02_N \"$AT_OTA_TOKEN_WROOM_02_N_1024_1024\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_WROOM_02_N \"$AT_OTA_TOKEN_WROOM_02_N_1024_1024\"" >> at_config.h
        echo -e "#endif" >> at_config.h
        cd -

        pip install --upgrade pip
        pip install pyyaml xlrd
        mkdir build
        echo -e "{\"platform\": \"PLATFORM_ESP8266\", \"module\": \"WROOM-5V2L\", \"silence\": 0}" > build/module_info.json
        ./build.py reconfigure || echo "skip exception"
      shell: bash
    - name: Install dependencies
      env:
        IDF_PATH: ${{ github.workspace }}/esp-idf
      run: |
        python -m pip install --user -r /home/runner/work/esp-at/esp-at/esp-idf/requirements.txt
    - name: Compiling
      run: |
        wget --no-check-certificate https://dl.espressif.com/dl/xtensa-lx106-elf-linux64-1.22.0-100-ge567ec7-5.2.0.tar.gz
        tar -xzf xtensa-lx106-elf-linux64-1.22.0-100-ge567ec7-5.2.0.tar.gz
        export PATH="$PATH:$(pwd)/xtensa-lx106-elf/bin"
        ./build.py build
        upload_dir=esp8266-wroom-5V2L-at
        mkdir -p $upload_dir $upload_dir/bootloader $upload_dir/partition_table $upload_dir/customized_partitions $upload_dir/factory
        cp build/flash_project_args $upload_dir/download.config
        cp build/*.bin $upload_dir/
        cp build/*.elf $upload_dir/
        cp build/*.map $upload_dir/
        cp build/bootloader/*.bin $upload_dir/bootloader/
        cp build/partition_table/*.bin $upload_dir/partition_table/
        cp build/customized_partitions/*.bin $upload_dir/customized_partitions/
        cp build/flasher_args.json $upload_dir/
        cp build/flash_project_args $upload_dir/download.config
        cp build/factory/* $upload_dir/factory
      shell: bash
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2
      with:
        name: esp8266-wroom-5V2L-at
        path: esp8266-wroom-5V2L-at

  build-esp8285-1MB-at:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: clone esp-idf
      env:
        AT_OTA_TOKEN_WROOM_02_1024_1024: ${{ secrets.AT_OTA_TOKEN_WROOM_02_1024_1024 }}
        AT_OTA_TOKEN_WROOM_S2_1024_1024: ${{ secrets.AT_OTA_TOKEN_WROOM_S2_1024_1024 }}
        AT_OTA_TOKEN_WROOM_5V2L: ${{ secrets.AT_OTA_TOKEN_WROOM_5V2L }}
        AT_OTA_TOKEN_ESP8266_1MB: ${{ secrets.AT_OTA_TOKEN_ESP8266_1MB }}
        AT_OTA_TOKEN_WROOM_02_N_1024_1024: ${{ secrets.AT_OTA_TOKEN_WROOM_02_1024_1024 }}
      run: |
        cd main
        rm -f at_config.h
        echo -e "#ifndef __AT_CONFIG_H__" >> at_config.h
        echo -e "#define __AT_CONFIG_H__" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_WROOM_02 \"$AT_OTA_TOKEN_WROOM_02_1024_1024\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_WROOM_02 \"$AT_OTA_TOKEN_WROOM_02_1024_1024\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_WROOM_S2 \"$AT_OTA_TOKEN_WROOM_S2_1024_1024\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_WROOM_S2 \"$AT_OTA_TOKEN_WROOM_S2_1024_1024\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_WROOM_5V2L \"$AT_OTA_TOKEN_WROOM_5V2L\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_WROOM_5V2L \"$AT_OTA_TOKEN_WROOM_5V2L\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_ESP8266_1MB \"$AT_OTA_TOKEN_ESP8266_1MB\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_ESP8266_1MB \"$AT_OTA_TOKEN_ESP8266_1MB\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_WROOM_02_N \"$AT_OTA_TOKEN_WROOM_02_N_1024_1024\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_WROOM_02_N \"$AT_OTA_TOKEN_WROOM_02_N_1024_1024\"" >> at_config.h
        echo -e "#endif" >> at_config.h
        cd -

        pip install --upgrade pip
        pip install pyyaml xlrd
        mkdir build
        echo -e "{\"platform\": \"PLATFORM_ESP8266\", \"module\": \"ESP8266_1MB\", \"silence\": 0}" > build/module_info.json
        ./build.py reconfigure || echo "skip exception"
      shell: bash
    - name: Install dependencies
      env:
        IDF_PATH: ${{ github.workspace }}/esp-idf
      run: |
        python -m pip install --user -r /home/runner/work/esp-at/esp-at/esp-idf/requirements.txt
    - name: Compiling
      run: |
        wget --no-check-certificate https://dl.espressif.com/dl/xtensa-lx106-elf-linux64-1.22.0-100-ge567ec7-5.2.0.tar.gz
        tar -xzf xtensa-lx106-elf-linux64-1.22.0-100-ge567ec7-5.2.0.tar.gz
        export PATH="$PATH:$(pwd)/xtensa-lx106-elf/bin"
        ./build.py build
        upload_dir=esp8285-1MB-at
        mkdir -p $upload_dir $upload_dir/bootloader $upload_dir/partition_table $upload_dir/customized_partitions $upload_dir/factory
        cp build/flash_project_args $upload_dir/download.config
        cp build/*.bin $upload_dir/
        cp build/*.elf $upload_dir/
        cp build/*.map $upload_dir/
        cp build/bootloader/*.bin $upload_dir/bootloader/
        cp build/partition_table/*.bin $upload_dir/partition_table/
        cp build/customized_partitions/*.bin $upload_dir/customized_partitions/
        cp build/flasher_args.json $upload_dir/
        cp build/flash_project_args $upload_dir/download.config
        cp build/factory/* $upload_dir/factory
      shell: bash
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2
      with:
        name: esp8285-1MB-at
        path: esp8285-1MB-at

  build-esp8266-wroom02-n-at:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: clone esp-idf
      env:
        AT_OTA_TOKEN_WROOM_02_1024_1024: ${{ secrets.AT_OTA_TOKEN_WROOM_02_1024_1024 }}
        AT_OTA_TOKEN_WROOM_S2_1024_1024: ${{ secrets.AT_OTA_TOKEN_WROOM_S2_1024_1024 }}
        AT_OTA_TOKEN_WROOM_5V2L: ${{ secrets.AT_OTA_TOKEN_WROOM_5V2L }}
        AT_OTA_TOKEN_ESP8266_1MB: ${{ secrets.AT_OTA_TOKEN_ESP8266_1MB }}
        AT_OTA_TOKEN_WROOM_02_N_1024_1024: ${{ secrets.AT_OTA_TOKEN_WROOM_02_1024_1024 }}
      run: |
        cd main
        rm -f at_config.h
        echo -e "#ifndef __AT_CONFIG_H__" >> at_config.h
        echo -e "#define __AT_CONFIG_H__" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_WROOM_02 \"$AT_OTA_TOKEN_WROOM_02_1024_1024\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_WROOM_02 \"$AT_OTA_TOKEN_WROOM_02_1024_1024\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_WROOM_S2 \"$AT_OTA_TOKEN_WROOM_S2_1024_1024\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_WROOM_S2 \"$AT_OTA_TOKEN_WROOM_S2_1024_1024\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_WROOM_5V2L \"$AT_OTA_TOKEN_WROOM_5V2L\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_WROOM_5V2L \"$AT_OTA_TOKEN_WROOM_5V2L\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_ESP8266_1MB \"$AT_OTA_TOKEN_ESP8266_1MB\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_ESP8266_1MB \"$AT_OTA_TOKEN_ESP8266_1MB\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_WROOM_02_N \"$AT_OTA_TOKEN_WROOM_02_N_1024_1024\"" >> at_config.h
        echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_WROOM_02_N \"$AT_OTA_TOKEN_WROOM_02_N_1024_1024\"" >> at_config.h
        echo -e "#endif" >> at_config.h
        cd -

        pip install --upgrade pip
        pip install pyyaml xlrd
        mkdir build
        echo -e "{\"platform\": \"PLATFORM_ESP8266\", \"module\": \"WROOM-02-N\", \"silence\": 0}" > build/module_info.json
        ./build.py reconfigure || echo "skip exception"
      shell: bash
    - name: Install dependencies
      env:
        IDF_PATH: ${{ github.workspace }}/esp-idf
      run: |
        python -m pip install --user -r /home/runner/work/esp-at/esp-at/esp-idf/requirements.txt
    - name: Compiling
      run: |
        wget --no-check-certificate https://dl.espressif.com/dl/xtensa-lx106-elf-linux64-1.22.0-100-ge567ec7-5.2.0.tar.gz
        tar -xzf xtensa-lx106-elf-linux64-1.22.0-100-ge567ec7-5.2.0.tar.gz
        export PATH="$PATH:$(pwd)/xtensa-lx106-elf/bin"
        ./build.py build
        upload_dir=esp8266-wroom02-n-at
        mkdir -p $upload_dir $upload_dir/bootloader $upload_dir/partition_table $upload_dir/customized_partitions $upload_dir/factory
        cp build/flash_project_args $upload_dir/download.config
        cp build/*.bin $upload_dir/
        cp build/*.elf $upload_dir/
        cp build/*.map $upload_dir/
        cp build/bootloader/*.bin $upload_dir/bootloader/
        cp build/partition_table/*.bin $upload_dir/partition_table/
        cp build/customized_partitions/*.bin $upload_dir/customized_partitions/
        cp build/flasher_args.json $upload_dir/
        cp build/flash_project_args $upload_dir/download.config
        cp build/factory/* $upload_dir/factory
      shell: bash
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2
      with:
        name: esp8266-wroom02-n-at
        path: esp8266-wroom02-n-at
